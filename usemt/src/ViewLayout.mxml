<?xml version="1.0" encoding="utf-8"?>
<mx:Window 
	xmlns:mx="http://www.adobe.com/2006/mxml"
	xmlns:control="gadget.control.*"
	resizable="false"
	title="{list.entity} View Layout"
	width="480" height="340" verticalAlign="middle"
	showFlexChrome="false" transparent="true" systemChrome="none"
	creationComplete="init();" 
	>
	
	<mx:Script>
		<![CDATA[
			import gadget.control.AccountListImageRenderer;
			import gadget.control.ContactListImageRenderer;
			import gadget.control.RequireFieldRenderer;
			import gadget.dao.Database;
			import gadget.i18n.i18n;
			import gadget.lists.List;
			import gadget.util.FieldUtils;
			
			import mx.collections.ArrayCollection;
			import mx.controls.AdvancedDataGrid;
			import mx.controls.Alert;
			import mx.controls.advancedDataGridClasses.AdvancedDataGridColumn;
			import mx.controls.dataGridClasses.DataGridColumn;
			import mx.events.DragEvent;
			import mx.formatters.SwitchSymbolFormatter;
			import mx.managers.DragManager;
			
			[Bindable] private var selectedCols:ArrayCollection;
			[Bindable] private var availableCols:ArrayCollection;
			[Bindable] public var list:List;
			
			private const VIEWLAYOUT_TITLEBAR_TITLE_VIEW_LAYOUT:String = 'GLOBAL_VIEW_LAYOUT';
			//CRO 05.01.2011
			private const VIEWLAYOUT_DATAGRIDCOLUMN_HEADERTEXT_AVAILABLE_COLUMNS:String = 'GLOBAL_AVAILABLE_COLUMNS';
			private const VIEWLAYOUT_DATAGRIDCOLUMN_HEADERTEXT_SELECTED_COLUMNS:String = 'GLOBAL_SELECTED_COLUMNS';
			private const VIEWLAYOUT_BUTTON_RESET_TO_DEFAULTS:String = 'GLOBAL_RESET_TO_DEFAULTS';
		    private const VIEWLAYOUT_DETAILBUTTONBAR_BUTTONLABEL_SAVE:String = 'GLOBAL_SAVE';
			
			
			private function init():void{
				
				// Selected Column
				initColsGridRight();
				
				// Available Columns
				initColsGridLeft();
				this.systemManager.stage.addEventListener(KeyboardEvent.KEY_DOWN,keyDown);
			}
			private function keyDown(evt:KeyboardEvent):void {
				if (evt.charCode == Keyboard.ESCAPE) {
					this.close();
				}
			}
			private function initColsGridRight():void{
				var records:ArrayCollection = Database.viewLayoutDAO.selectAll(list.entity);
				// Get Default filter
				//if(records.length==0) records = Database.viewLayoutDAO.getDefaultColumnsLayout(list.entity);
				selectedCols = new ArrayCollection();
				for each(var record:Object in records) {
						var field:Object =  FieldUtils.getField(record.entity, record.element_name);
						if(field){
							record.display_name = field.display_name;
							record.required = field.required;
						}	
						selectedCols.addItem(record);
				}
			}
			
			private function initColsGridLeft():void{
				availableCols = new ArrayCollection();
				var colsFields:ArrayCollection = FieldUtils.allFields(list.entity,false,true);
				for each (var field:Object in colsFields){	
					if (!checkObjectSelected(field.element_name)){
						availableCols.addItem(field);
					}
				}	
			}
			
			private function checkObjectSelected(s:String):Object{
				for each (var field:Object in selectedCols) {
					if (s == field.element_name){
						return true;
					}
				}
				return false;
			}
			
			
			private function save():void{
				Database.viewLayoutDAO.deleteEntity(list.entity);
				var rows:Object = selectedColumns.dataProvider;
				var index:int=1;
				for each(var o:Object in rows) {
					
					var obj:Object = new Object();
					obj.num = index;
					obj.element_name = o.element_name;
					obj.entity = list.entity;
					Database.viewLayoutDAO.insertViewLayout(obj);
					index += 1;
				}
//				list.filterData();
//				list.initGridColumns();
				list.detail.init();
				list.detail.loadData();
				this.close();
			}
			
			private function reset():void {
				var fields:ArrayCollection = FieldUtils.getDefaultFieldsObject(list.entity);				
				selectedCols = new ArrayCollection();
				for each (var element_name:String in fields) {
					selectedCols.addItem(FieldUtils.getField(list.entity, element_name));
				}
				initColsGridLeft();
			}
			
			private function dropItem(event:DragEvent):void {
				var gridDrag:DataGrid = event.dragInitiator as DataGrid;
				if(gridDrag.id == 'selectedColumns'){
					var index:int = gridDrag.selectedIndex;
					selectedCols.removeItemAt(index);
					initColsGridLeft();
				}
				
			}
			
			private function checkColumnName(event:DragEvent):void{
				var gridRight:DataGrid = event.dragInitiator as DataGrid;
				
				
				var field:Object =  FieldUtils.getField(list.entity, gridRight.selectedItem.element_name);
				if(field && field.required != true ){
					DragManager.acceptDragDrop(event.target as DataGrid);
				}
				
//				switch(list.entity){
//					case 'Account':
//						if(gridRight.selectedItem.element_name != 'AccountName'){
//							DragManager.acceptDragDrop(event.target as DataGrid);
//						}
//						break;
//					case 'Contact':
//						if(gridRight.selectedItem.element_name != 'ContactFirstName' && 
//							gridRight.selectedItem.element_name != 'ContactLastName'){
//							DragManager.acceptDragDrop(event.target as DataGrid);
//						}
//						break;
//					case 'Opportunity':
//						if(gridRight.selectedItem.element_name != 'OpportunityName'&&
//							gridRight.selectedItem.element_name != 'CloseDate'&&
//							gridRight.selectedItem.element_name != 'SalesStage'){
//							DragManager.acceptDragDrop(event.target as DataGrid);
//						}
//						break;
//					case 'Activity':
//						if(gridRight.selectedItem.element_name != 'Subject' &&
//							gridRight.selectedItem.element_name != 'Priority' &&
//							gridRight.selectedItem.element_name != 'DueDate'){
//							DragManager.acceptDragDrop(event.target as DataGrid);
//						}
//						break;
//					case 'Product':
//						if(gridRight.selectedItem.element_name != 'Name'){
//							DragManager.acceptDragDrop(event.target as DataGrid);
//						}
//						break;
//					case 'Service Request':
//						if(gridRight.selectedItem.element_name != 'SRNumber'){
//							DragManager.acceptDragDrop(event.target as DataGrid);
//						}
//						break;
//					case 'Campaign':
//						if(gridRight.selectedItem.element_name != 'SourceCode' && 
//							gridRight.selectedItem.element_name != 'CampaignName'){
//							DragManager.acceptDragDrop(event.target as DataGrid);
//						} 
//						break;
//					case 'Lead': 
//						if(gridRight.selectedItem.element_name != 'LeadFirstName' && 
//							gridRight.selectedItem.element_name != 'LeadLastName'){
//							DragManager.acceptDragDrop(event.target as DataGrid);
//						} 
//						break;
//					case 'Custom Object 1':
//						if(gridRight.selectedItem.element_name != 'Name'){
//							DragManager.acceptDragDrop(event.target as DataGrid);
//						} 
//						break;
//					case 'CustomObject14':
//						if(gridRight.selectedItem.element_name != 'Name'){
//							DragManager.acceptDragDrop(event.target as DataGrid);
//						} 
//						break;
//				}
			}
			
		]]>
	</mx:Script>   
	<mx:Style source="styles.css"/>
	<mx:Canvas styleName="main" left="0" top="0" width="480" height="340" right="0" bottom="0">
		<control:TitleBar title="{Database.customLayoutDao.getDisplayName(list.entity)} {i18n._(VIEWLAYOUT_TITLEBAR_TITLE_VIEW_LAYOUT)}" icon="@Embed(source='/assets/customize.png')"/>
		<mx:VBox top="40" left="16" right="16" bottom="16">
			<mx:HBox width="100%">
				<mx:DataGrid id="availableColumns" rowCount="10" dataProvider="{availableCols}" width="50%"
							 dragEnabled="true"
							 dragMoveEnabled="true"
							 dragDrop="dropItem(event)"
							 dragEnter="checkColumnName(event)">
					<mx:columns>
						<mx:DataGridColumn headerText="{i18n._(VIEWLAYOUT_DATAGRIDCOLUMN_HEADERTEXT_AVAILABLE_COLUMNS)}" dataField="display_name" itemRenderer="gadget.control.RequireFieldRenderer" />
					</mx:columns>
				</mx:DataGrid>
				<mx:DataGrid id="selectedColumns" rowCount="10" width="50%"
							 dataProvider="{selectedCols}"
							 dragEnabled="true"
							 dragMoveEnabled="true"
							 dropEnabled="true">
					<mx:columns>
						<mx:DataGridColumn headerText="{i18n._(VIEWLAYOUT_DATAGRIDCOLUMN_HEADERTEXT_SELECTED_COLUMNS)}" dataField="display_name" itemRenderer="gadget.control.RequireFieldRenderer" />
					</mx:columns>
				</mx:DataGrid>
			</mx:HBox>
			<mx:HBox width="100%">
				<mx:Canvas>
					<mx:Button label="{i18n._(VIEWLAYOUT_BUTTON_RESET_TO_DEFAULTS)}" click="reset()" top="8"/>	
				</mx:Canvas><!--CRO 05.01.2011-->				
				<control:DetailButtonBar buttonLabel="GLOBAL_SAVE" action="save"/>
			</mx:HBox>			
		</mx:VBox>
		
	</mx:Canvas>
</mx:Window>
