<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas 
	creationComplete="init()"
	xmlns:mx="http://www.adobe.com/2006/mxml" 
	xmlns:code="http://code.google.com/p/flexlib/"
	xmlns:containers="flexlib.containers.*"
	width="100%"
	height="100%"
	>
	
	<mx:Script>
		<![CDATA[
			import com.crmgadget.eval.DateUtils;
			
			import gadget.dao.Database;
			import gadget.i18n.i18n;
			import gadget.lists.List;
			import gadget.service.RightService;
			import gadget.util.ActivityDataUtils;
			import gadget.util.ImageUtils;
			import gadget.util.Utils;
			import gadget.window.WindowManager;
			
			import mx.collections.ArrayCollection;
			import mx.containers.GridItem;
			import mx.containers.GridRow;
			import mx.containers.HBox;
			import mx.controls.Alert;
			import mx.controls.CheckBox;
			import mx.controls.Image;
			import mx.controls.Label;
			import mx.controls.TextInput;
			import mx.core.IWindow;
			import mx.events.CloseEvent;
			private var  mapActivities:Object = new Object();
			private var status:String = "Home task";
			private var UPCOMING:String = "Upcoming";
			private var WITHOUT_DATE:String = "Without Date";
			private var HOME_TASK:String = "Home task";
			public static var COMPLETED:String = "Completed";
			public static var ASSIGNED:String = "Assigned";
			private var userOwner:Object;
			private var lst:ArrayCollection = new ArrayCollection();
			private var mapList:Object = new Object();
			[Bindable] public var list:List;
			private var mapChkTasks:Object = new Object();
			private var allIndex:int ;
			private var item:Object = new Object();
			private var listId:String ;
			private var fieldStatus:String;
			//[Bindable] public var openScreenCreateTask:Function;
			private function init():void{
				showHomeTask();
				allIndex =0;
				
				var owner:Object = Database.allUsersDao.ownerUser();
				if(owner != null && owner.hasOwnProperty("Id")){
					//getTasks(owner.Id);	
					setSeletedUser(owner.Id);
				}
			}
			private function setSeletedUser(Id:String):void{ //Change Request #5063: Home Activity CRO
				var user:ArrayCollection = cboAllUsers.dataProvider as ArrayCollection;
				
				for(var i:int;i<user.length;i++){
					if(user[i].Id == Id){
						cboAllUsers.selectedIndex = i;
						break;
					}
				}
			}
			
			public function loadDataOfSelectedUser():void{
				allIndex =0;
				//chkTasks = new Array();
				mapList = new Object();
				mapChkTasks = new Object();
				btnNewTask.enabled = RightService.canCreate(Database.activityDao.entity);
				lst.removeAll();
				if(cboAllUsers.selectedItem != null)  
					getTasks(cboAllUsers.selectedItem.Id);
			}
			private function getTasks(selectedUser:String):void{
				userOwner = Database.allUsersDao.ownerUser();
				var criteria:Object = new Object();
				criteria.OwnerId = selectedUser;
				listOverdue.removeAllChildren();
				listToday.removeAllChildren();
				listNextWeek.removeAllChildren();
				listThisWeek.removeAllChildren();
				listFuture.removeAllChildren();
				listAssigned.removeAllChildren();
				listCompleted.removeAllChildren();
				if(status == HOME_TASK){
					criteria.Status = COMPLETED;
					criteria.StartTime =  DateUtils.dateAdd(-30, new Date(), "date",DateUtils.DATABASE_DATE_FORMAT);
					criteria.EndTime =  DateUtils.format(new Date(),DateUtils.DATABASE_DATE_FORMAT);
					bindListActivity(listOverdue,criteria,status);
					
					criteria.StartTime = DateUtils.format(new Date(),DateUtils.DATABASE_DATE_FORMAT);
					criteria.EndTime = DateUtils.dateAdd(1,new Date(), "date",DateUtils.DATABASE_DATE_FORMAT);
					bindListActivity(listToday,criteria,status);
					
					criteria.StartTime = DateUtils.dateAdd(1, new Date(), "date",DateUtils.DATABASE_DATE_FORMAT);	
					criteria.EndTime = DateUtils.dateAdd(0, null, "endDayOfWeek",DateUtils.DATABASE_DATE_FORMAT);
					bindListActivity(listThisWeek,criteria,status);
					
					criteria.StartTime =DateUtils.dateAdd(0, null, "endDayOfWeek",DateUtils.DATABASE_DATE_FORMAT);
					criteria.EndTime  = DateUtils.dateAdd(7, DateUtils.parse(criteria.StartTime,DateUtils.DATABASE_DATE_FORMAT), "endDayOfWeek",DateUtils.DATABASE_DATE_FORMAT);
					bindListActivity(listNextWeek,criteria,status);
					
					criteria.StartTime =criteria.EndTime;
					criteria.EndTime  = DateUtils.dateAdd(100, DateUtils.parse(criteria.StartTime, DateUtils.DATABASE_DATE_FORMAT), "date",DateUtils.DATABASE_DATE_FORMAT);
					bindListActivity(listFuture,criteria,status);	
				}else if(status == UPCOMING){
					criteria.Status = COMPLETED;
					criteria.StartTime =  DateUtils.dateAdd(-30, new Date(), "date",DateUtils.DATABASE_DATE_FORMAT);
					criteria.EndTime =  DateUtils.format(new Date(),DateUtils.DATABASE_DATE_FORMAT);
					bindListActivity(listOverdue,criteria,status);
				}
				else if(status == COMPLETED){
					criteria.Status = COMPLETED;
					//criteria.StartTime =  DateUtils.dateAdd(-14, new Date(), "date",DateUtils.DATABASE_DATE_FORMAT);
					//criteria.EndTime =  DateUtils.format(new Date(),DateUtils.DATABASE_DATE_FORMAT);
					bindListActivity(listCompleted,criteria,status);
				}else if(status == ASSIGNED){
					criteria.Status = ASSIGNED;
					//criteria.StartTime =  DateUtils.dateAdd(-14, new Date(), "date",DateUtils.DATABASE_DATE_FORMAT);
					//criteria.EndTime =  DateUtils.format(new Date(),DateUtils.DATABASE_DATE_FORMAT);
					bindListActivity(listAssigned,criteria,status);
				}
				btnComOverdue.visible = true;
				btnAssOverdue.visible= true;
				
				btnComToday.visible = true;
				btnAssToday.visible = true;
				
				btnComThis.visible = true;	
				btnAssThis.visible = true;
				
				btnComNext.visible = true;
				btnAssNext.visible = true;
				
				btnComFuture.visible = true;
				btnAssFuture.visible = true;
				
				btnUpCompleted.visible = true;
				
				//btnUpAssigned.visible = true;
				btnComAssigned.visible = true;
				
				if(listOverdue.getChildren().length==0) {
					btnComOverdue.visible = false;
					btnAssOverdue.visible= false;
				}
				if(listToday.getChildren().length==0){
					btnComToday.visible = false;
					btnAssToday.visible = false;
				}
				if(listThisWeek.getChildren().length == 0){
					btnComThis.visible = false;	
					btnAssThis.visible = false;
				}
				if(listNextWeek.getChildren().length == 0){
					btnComNext.visible = false;
					btnAssNext.visible = false;
				}
				if(listFuture.getChildren().length == 0){
					btnComFuture.visible = false;
					btnAssFuture.visible = false;
				}
				if(listCompleted.getChildren().length == 0){
					btnUpCompleted.visible = false;
				}
				if(listAssigned.getChildren().length == 0){
					//	btnUpAssigned.visible = false;
					btnComAssigned.visible = false;
				}
				
			}
			public function editScreenDetail(subject:String):void {
				var item:Object = mapActivities[subject];
//				var screenDetail:Detail = new Detail();
//				screenDetail.calendar = list.calendar;
//				screenDetail.calendarIlog = list.calendarIlog;					
//				screenDetail.item = mapActivities[subject];
//				screenDetail.entity = Database.activityDao.entity;
//				screenDetail.mainWindow = list.mainwindow as MainWindow;
//				screenDetail.refreshFunction = list.selectItem;
//				screenDetail.refreshHomTask = refreshHomeTask;
//				WindowManager.openModal(screenDetail);
				list.editScreenDetail(item,Database.activityDao.entity,function(item:Object):void{loadDataOfSelectedUser();});
				
			}
			public function changeFavorite(image:Image,index:int):void{
				var act:Object = lst[index];
				act.favorite = (act.favorite == null || act.favorite == 0) ? true : false;
				Database.getDao(Database.activityDao.entity).updateFavorite(act);
				image.source = act.favorite ? ImageUtils.favorite :ImageUtils.unFavorite;
			}
			public function deleteTask(index:int):void{
				
				Alert.show(i18n._('GLOBAL_ARE_YOU_SURE_YOU_WANT_TO_DELETE'),i18n._('GLOBAL_DELETE') + " " +lst[index].Subject, Alert.YES|Alert.NO, this, function(event:CloseEvent):void{
					if (event.detail==Alert.YES){
						Database.getDao(Database.activityDao.entity).delete_(lst[index]);
						refreshHomeTask();
					}    	 
				});				
			}
			public function showPopup(x:int,y:int,isDesc:Boolean,index:int):void{
				var popup:PopupCalendarDesc = new PopupCalendarDesc();
				list.mainwindow.enabled = false;
				popup.isVisibleDesc = isDesc;
				popup.activity = lst[index]
				popup.refresh = loadDataOfSelectedUser;
				popup.mainwindow = list.mainwindow;
				
				// popup.open();
				WindowManager.openPopup(popup);
				if(x > 1100){
					x= x - 200;
					y = y > 400 ? y - 195 : y ;
				}else if(y > 400){
					x = x - 41;
					y = y - 130 ;
				}else{
					x = x - 40;
					y = y + 71;
				}
				(popup as IWindow).nativeWindow.x =x;
				(popup as IWindow).nativeWindow.y = y;
				
				
			}
			public function showTaskList():void{
				list.listTab.visible = true;
				list.listTab.percentWidth = 100;
				list.listTab.percentHeight = 100;
				list.homeTask.visible = false;
				list.homeTask.width = 0;
				list.homeTask.height =0;
				list.visibleHomeTask = false
				list.loadData();
				
			}
			public function showHomeTask():void{
				boxUpcoming.includeInLayout = true;
				boxHomeTask.includeInLayout = true;
				boxUpcoming.visible = true;
				boxHomeTask.visible = true;
				boxCompleted.includeInLayout= false;
				boxAssigned.includeInLayout = false;
				boxCompleted.visible= false;
				boxAssigned.visible = false;
			}
			public function refreshHomeTask():void{
				Utils.showLoadingProgressWindow(loadDataOfSelectedUser, i18n._("GLOBAL_PROCESSING"), i18n._("GLOBAL_PROCESSING"));
			}
			private function clickStatus(e:Event):void{
				var button:Button = (e.currentTarget as Button);
				switch(button.id){
					case btnComOverdue.id:
						updateStatus(listOverdue.id,COMPLETED);
						break;
					case btnAssOverdue.id:
						updateStatus(listOverdue.id,ASSIGNED);
						break;
					case btnComToday.id:
						updateStatus(listToday.id,COMPLETED);
						break;
					case btnAssToday.id:
						updateStatus(listToday.id,ASSIGNED);
						break;
					case btnComThis.id:
						updateStatus(listThisWeek.id,COMPLETED);
						break;
					case btnAssThis.id:
						updateStatus(listThisWeek.id,ASSIGNED);
						break;
					case btnComNext.id:
						updateStatus(listNextWeek.id,COMPLETED);
						break;
					case btnAssNext.id:
						updateStatus(listNextWeek.id,ASSIGNED);
						break;
					case btnComFuture.id:
						updateStatus(listFuture.id,COMPLETED);
						break;
					case btnAssFuture.id:
						updateStatus(listFuture.id,ASSIGNED);
						break;
					case btnUpCompleted.id:
						updateStatus(listCompleted.id,'');
						break;
					/*case btnUpAssigned.id:
					updateStatus(listAssigned.id,ASSIGNED);
					break;*/
					case btnComAssigned.id:
						updateStatus(listAssigned.id,COMPLETED);
						break;
				}
				
			}
			public function statusChange(e:Event):void{
				
				var buttonLink:LinkButton = (e.currentTarget as LinkButton);
				if(buttonLink.id =="btnHomeTask"){
					buttonLink.setStyle("color","0xCCCCCC");
					btnCompleted.setStyle("color","0x2c79b8");
					btnAssigned.setStyle("color","0x2c79b8");
					//btnUpcoming.setStyle("color","0x2c79b8");
					
					status = HOME_TASK;
					showHomeTask();
					
					Utils.showLoadingProgressWindow(loadDataOfSelectedUser, i18n._("GLOBAL_PROCESSING"), i18n._("GLOBAL_PROCESSING"));
				}else if(buttonLink.id=="btnUpcoming") {
					buttonLink.setStyle("color","0xCCCCCC");
					btnCompleted.setStyle("color","0x2c79b8");
					btnAssigned.setStyle("color","0x2c79b8");
					btnHomeTask.setStyle("color","0x2c79b8");
					boxUpcoming.includeInLayout = true;
					boxUpcoming.visible = true;
					boxHomeTask.includeInLayout = false;
					boxAssigned.includeInLayout = false;
					boxCompleted.includeInLayout = false;
					boxHomeTask.visible = false;
					boxAssigned.visible = false;
					boxCompleted.visible = false;
					
					status = UPCOMING;
					Utils.showLoadingProgressWindow(loadDataOfSelectedUser, i18n._("GLOBAL_PROCESSING"), i18n._("GLOBAL_PROCESSING"));
				}else if(buttonLink.id == "btnCompleted") {
					buttonLink.setStyle("color","0xCCCCCC");
					//btnUpcoming.setStyle("color","0x2c79b8");
					btnAssigned.setStyle("color","0x2c79b8");
					btnHomeTask.setStyle("color","0x2c79b8");
					boxCompleted.includeInLayout = true;
					boxCompleted.visible = true;
					boxHomeTask.includeInLayout = false;
					boxAssigned.includeInLayout = false;
					boxUpcoming.includeInLayout = false;
					boxHomeTask.visible = false;
					boxAssigned.visible = false;
					boxUpcoming.visible = false;
					
					status = COMPLETED;
					Utils.showLoadingProgressWindow(loadDataOfSelectedUser, i18n._("GLOBAL_PROCESSING"), i18n._("GLOBAL_PROCESSING"));
				}else if(buttonLink.id == "btnAssigned"){
					buttonLink.setStyle("color","0xCCCCCC");
					//btnUpcoming.setStyle("color","0x2c79b8");
					btnCompleted.setStyle("color","0x2c79b8");
					btnHomeTask.setStyle("color","0x2c79b8");
					boxAssigned.includeInLayout = true;
					boxAssigned.visible = true;
					boxHomeTask.includeInLayout = false;
					boxCompleted.includeInLayout = false;
					boxUpcoming.includeInLayout = false;
					boxHomeTask.visible = false;
					boxCompleted.visible = false;
					boxUpcoming.visible = false;
					
					status = ASSIGNED;
					Utils.showLoadingProgressWindow(loadDataOfSelectedUser, i18n._("GLOBAL_PROCESSING"), i18n._("GLOBAL_PROCESSING"));
				}else if(buttonLink.id =="btnTaskList"){
					showTaskList();
				}
				
			}
			private function updateStatus(listId:String ,status:String):void{
				var isOneSelected:Boolean;
				var index:int = 0;
				for each(var obj:Object in (mapList[listId] as ArrayCollection)){
					if(mapChkTasks[listId + index]){
						isOneSelected = true;
					}
					index += 1;
				}
				if(!isOneSelected){
					Alert.show(i18n._('GLOBAL_PLEASE_SELECT_AT_LEAST_ONE_RECORD') ,"" , Alert.OK,this);
					return ;
				}else{
					this.listId = listId;
					this.fieldStatus = status;
					if(status==ASSIGNED){
						findUserDelegate();
					}else{
						Utils.showLoadingProgressWindow(doUpdate, i18n._("GLOBAL_PROCESSING"), i18n._("GLOBAL_PROCESSING"));
					}
					
				}
				
				
			}	
			private function doUpdate():void{
				var index:int =0 ;
				Database.begin();
				for each(var obj:Object in (mapList[listId] as ArrayCollection)){
					if(mapChkTasks[listId + index]){
						if(fieldStatus == ASSIGNED){
							if(item.OnwerId) continue;
							obj.DelegatedBy = (obj.DelegatedBy==null || obj.DelegatedBy=='') ? obj.Owner : obj.DelegatedBy ;
							obj.DelegatedById = (obj.DelegatdeById==null || obj.DelegatdeById=='') ? obj.OwnerId : obj.DelegatdeById;
							obj.Owner = item.Owner; 
							obj.OwnerId = item.OwnerId;
						}else{
							obj.Status = fieldStatus;	
						}
						
						obj.local_update = new Date().getTime();
						Database.getDao(Database.activityDao.entity).update(obj);
						
					}
					index += 1;
				}
				Database.commit();
				loadDataOfSelectedUser();
				
			}
			private function findUserDelegate():void {
				
				var finder:GenericFinder = new GenericFinder();
				finder.textInput = new TextInput();
				finder.item = item;
				finder.reload = doUpdate;  // do action update owner and delegate by
				finder.dataQuery = {element_name:"Owner",entity:"Activity"};
				WindowManager.openModal(finder);
			}
			private function bindListActivity(list:Grid,criteria:Object,type:String=""):void{
				var index:int =0 ;
				var lstTask:ArrayCollection;
				var isCanDelete:Boolean = true;
				var enableDelete:Object = Database.transactionDao.find(Database.activityDao.entity);
				if(!RightService.canDelete(Database.activityDao.entity) || enableDelete == null || enableDelete.authorize_deletion == null || enableDelete.authorize_deletion ==0){
					isCanDelete = false;
				}
				
				if(type == HOME_TASK){
					criteria.Limit = 5;
					lstTask = Database.activityDao.getActivityByStartEndTime(criteria);
					if(list.id ==listOverdue.id){
						mapList[listOverdue.id] = lstTask;
					}else if(list.id ==listToday.id){
						mapList[listToday.id] = lstTask;
					}else if(list.id ==listThisWeek.id){
						mapList[listThisWeek.id] = lstTask;
					}else if(list.id ==listNextWeek.id){
						mapList[listNextWeek.id] = lstTask;
					}else{
						mapList[listFuture.id] = lstTask;
					}
					
				}else if(type ==UPCOMING){
					criteria.Limit = 20;
					lstTask = Database.activityDao.getActivityByStartEndTime(criteria);
					mapList[listOverdue.id] = lstTask;
				}else if(type == COMPLETED ){
					lstTask = Database.activityDao.getActivityByStatus(criteria);
					mapList[listCompleted.id] = lstTask;
				}else{
					lstTask = Database.activityDao.getDelegate(criteria);
					mapList[listAssigned.id] = lstTask;
				}
				if(lstTask.length >0) lst.addAll(lstTask);
				if(item == null && lstTask.length >0) item = lstTask.getItemAt(0); 
				var d:Date;
				list.removeAllChildren(); //remove grid
				for each(var obj:Object in lstTask){
					
					var gridRow:GridRow = new GridRow();
					var gridItem:GridItem = new GridItem();
					var gridRowRule:GridRow = new GridRow();
					var gridItemRule:GridItem = new GridItem();
					var gridRowAssignTo:GridRow = new GridRow();
					var gridItemAssignTo:GridItem = new GridItem();
					var rowSubj:HBox =new HBox();
					var col:VBox =new VBox();
					var col2:VBox =new VBox();
					var rowAssignTo:HBox =new HBox();
					var colAssignTo:VBox =new VBox();
					var colRelatedTo:VBox =new VBox();
					var lbl:Label = new Label();
					var lbl1:Label = new Label();
					var lblAssignTo:Label = new Label();
					var lblRelatedTo:Label = new Label();
					var chk:CheckBox = new CheckBox();
					var hboxData:HBox = new HBox();
					var hboxDate:HBox = new HBox();
					var starImg:Image = new Image();
					var descImg:Image = new Image();
					var delImg:Image = new Image();
					var dateImg:Image =new Image();
					//Add subject 
					//chkTasks[allIndex] = false;
					mapChkTasks[list.id + index] = false;
					hboxData.percentWidth=85;
					//checkbox
					chk.id = list.id + index;
					chk.percentWidth = 1;
					//chk.selected = chkAll.selected;
					chk.addEventListener(MouseEvent.CLICK,function(e1:MouseEvent):void{
						var current:CheckBox = e1.currentTarget as CheckBox;
						mapChkTasks[current.id] = current.selected;
					});
					hboxData.addChild(chk);
					//favorite
					starImg.id = "star"+allIndex;
					starImg.source = ( obj.favorite == null || obj.favorite == 0 ) ? ImageUtils.unFavorite : ImageUtils.favorite;
					starImg.addEventListener(MouseEvent.CLICK,function(e1:MouseEvent):void{
						var img:Image = e1.currentTarget as Image;
						changeFavorite(img,int(img.id.substr(4)));
					});
					hboxData.addChild(starImg);
					//subject
					lbl.text = obj.Subject;
					lbl.id = list.id + index;
					lbl.percentWidth = 84;
					lbl.setStyle("fontWeight","bold");
					lbl.setStyle("text-decoration","line-through");
					if(obj.Status == COMPLETED) lbl.setStyle("fontStyle","italic");
					lbl.addEventListener(MouseEvent.CLICK,function(e1:MouseEvent):void{
						var currentLabel:Label = e1.currentTarget as Label;
						editScreenDetail(currentLabel.text + currentLabel.id);
					});
					mapActivities[obj.Subject + lbl.id] = obj;
					col.percentWidth = 85;
					hboxData.addChild(lbl);
					col.addChild(hboxData);
					//Date icon
					dateImg.id = "date"+ allIndex;
					dateImg.source = ImageUtils.time;
					dateImg.addEventListener(MouseEvent.CLICK,function(e1:MouseEvent):void{
						var img:Image = e1.currentTarget as Image;
						showPopup(e1.stageX,e1.stageY,false,int(img.id.substr(4)));
					});
					hboxDate.addChild(dateImg);
					
					//Description icon
					descImg.id = "desc"+ allIndex;
					descImg.source = ImageUtils.paper;
					descImg.addEventListener(MouseEvent.CLICK,function(e1:MouseEvent):void{
						var img:Image = e1.currentTarget as Image;
						showPopup(e1.stageX,e1.stageY,true,int(img.id.substr(4)));
					});
					hboxDate.addChild(descImg);
					//delete icon
					
					delImg.id = "del"+ allIndex;
					delImg.source = isCanDelete ? ImageUtils.cross : ImageUtils.darkCross;
					delImg.enabled = isCanDelete;
					delImg.addEventListener(MouseEvent.CLICK,function(e1:MouseEvent):void{
						var img:Image = e1.currentTarget as Image;
						deleteTask(int(img.id.substr(3)));
					});
					hboxDate.addChild(delImg);
					
					col2.addChild(hboxDate);
					//dueDate
					d =new Date( DateUtils.parse(obj.DueDate,DateUtils.DATABASE_DATE_FORMAT));
					lbl1.setStyle("fontWeight","bold");
					lbl1.setStyle("horizontalAlign", "right");
					lbl1.text = DateUtils.getStrMonth(d) + " " + d.getDate() ;//+ " " + d.getHours() + ":" + d.getMinutes() ;
					lbl1.percentWidth=15;
					hboxDate.addChild(lbl1);
					col2.setStyle("horizontalAlign", "right");
					col2.percentWidth = 15;
					col2.addChild(hboxDate);
					rowSubj.percentWidth = 100;
					rowSubj.addChild(col);
					rowSubj.addChild(col2);
					gridItem.percentWidth = 100;
					gridItem.addChild(rowSubj);
					gridRow.percentWidth = 100;
					gridRow.addChild(gridItem);
					list.addChild(gridRow);
					//Add assign to and related
					
					lblAssignTo.percentWidth = 70;
					lblAssignTo.text = obj.Owner == null  ? "" :  i18n._('GLOBAL_DELEGATE_TO')+ " " + obj.Owner;
					lblRelatedTo.setStyle("horizontalAlign", "right");
					lblRelatedTo.percentWidth = 30;
					lblRelatedTo.text = (obj.DelegatedBy == null || obj.DelegatedById == null || obj.DelegatedById == '') ? "" : i18n._('GLOBAL_RELATED_TO')+ " " + obj.DelegatedBy ;
					colRelatedTo.setStyle("horizontalAlign", "right");
					colAssignTo.percentWidth = 100;
					colAssignTo.addChild(lblAssignTo);
					colRelatedTo.addChild(lblRelatedTo);
					rowAssignTo.percentWidth =100;
					rowAssignTo.addChild(colAssignTo);
					rowAssignTo.addChild(colRelatedTo);
					gridItemAssignTo.addChild(rowAssignTo);
					gridRowAssignTo.percentWidth = 100;
					gridRowAssignTo.addChild(gridItemAssignTo);
					list.addChild(gridRowAssignTo);
					allIndex +=1;
					index += 1;
					var rule:HBox = new HBox();
					rule.height = 1;
					rule.percentWidth = 100;
					rule.setStyle("backgroundColor","0xCCCCCC");
					gridItemRule.addChild(rule);
					gridRowRule.percentWidth = 100;
					gridRowRule.addChild(gridItemRule);
					list.addChild(gridRowRule);
					
				} 
			}
			private function createTask():void{
				//Change Request #5063: Home Activity CRO
				list.openScreenCreate(ActivityDataUtils.getActivityData(0),0,null,function(item:Object):void{loadDataOfSelectedUser();});
				//openScreenCreateTask(ActivityDataUtils.getActivityData(0),0,null,selectedUser);
			}
		]]>
	</mx:Script>
	
	<mx:Style source="styles.css"/>
	<mx:Canvas id="detailCanvas" horizontalScrollPolicy="off" verticalScrollPolicy="off" styleName="main" left="0" top="10" width="100%" height="100%" right="0" bottom="0">
		
		<mx:HBox height="50" width="100%" top="20" right="30" left="40">
			<mx:VBox width="95%">
				<mx:ComboBox  id="cboAllUsers" labelField="Alias" dataProvider="{ Database.allUsersDao.selectAll()}" change="loadDataOfSelectedUser()"/>
			</mx:VBox>
			<mx:VBox width="5%" horizontalAlign="right" height="50">
				<mx:HBox >
					
					<mx:LinkButton paddingLeft="1" paddingRight="1" id="btnNewTask" textAlign="left" label="{i18n._('GLOBAL_TASK_NEW')}"  click="createTask()" toggle="true" icon="@Embed('/assets/custom/si_task16.gif')" /> 
					<mx:Label text="|" paddingLeft="-5" paddingRight="-10"/>
					<mx:LinkButton paddingLeft="1" paddingRight="1" id="btnHomeTask" textAlign="left" label="{i18n._('GLOBAL_OPEN_TASK')}" click="statusChange(event)" toggle="true"  color="#CCCCCC" /> <!--icon="@Embed('/assets/home.png')"-->
					<mx:Label text="|" paddingLeft="-5" paddingRight="-10"/>
					<mx:LinkButton paddingLeft="1" paddingRight="1" id="btnCompleted" textAlign="left" label="{i18n._('GLOBAL_COMPLETED')}" click="statusChange(event)" color="#2c79b8"/>
					<mx:Label text="|" paddingLeft="-5" paddingRight="-10"/>
					<mx:LinkButton paddingLeft="1" paddingRight="1" id="btnAssigned" textAlign="left" label="{i18n._('GLOBAL_DELEGATE')}" click="statusChange(event)" color="#2c79b8"/>
					<mx:Label text="|" paddingLeft="-5" paddingRight="-10"/>
					<mx:LinkButton paddingLeft="1" paddingRight="1" left="0" right="0" id="btnTaskList" textAlign="left" label="{i18n._('GLOBAL_APPOINTMENTS_HOME')}" icon="@Embed('/assets/task.png')" click="statusChange(event)"  />
				</mx:HBox>
			</mx:VBox>
			
		</mx:HBox>
		
		<mx:Canvas    top="65" width="100%" height="100%" borderStyle="solid" right="20" left="20" bottom="20">
			<mx:VBox width="100%" height="100%"  verticalAlign="top" top="20" right="20" left="20" bottom="20">
				<mx:VBox id="boxUpcoming" width="100%" >
					
					<mx:HBox height="22" width="100%" top="55" right="40" left="40" >
						<mx:HBox backgroundColor="0xFF0000"  height="20" width="130" paddingBottom="0" top="65">
							<mx:Label text="{i18n._('GLOBAL_OVERDUE')}" color="#FFFFFF" fontWeight="bold" />
						</mx:HBox>
						<mx:Button id="btnComOverdue" label="{i18n._('GLOBAL_MARK_AS_COMPLETED')}" click="clickStatus(event)"/>
						<mx:Button id="btnAssOverdue" label="{i18n._('GLOBAL_DELEGATE_TO')}" click="clickStatus(event)"/>
					</mx:HBox>
					<mx:HBox backgroundColor="0xFF0000" height="3" width="100%" top="0"/>
					<mx:Grid id="listOverdue"  width="100%"/>
				</mx:VBox>
				<mx:VBox id="boxHomeTask" width="100%" height="100%">
					<mx:HBox height="22" width="100%" top="55" right="40" left="40" >
						<mx:HBox backgroundColor="339933"  height="21" width="130" >
							<mx:Label text="{i18n._('GLOBAL_TODAY')}" color="#FFFFFF" fontWeight="bold"/>
						</mx:HBox>
						<mx:Button id="btnComToday" label="{i18n._('GLOBAL_MARK_AS_COMPLETED')}" click="clickStatus(event)"/>
						<mx:Button id="btnAssToday" label="{i18n._('GLOBAL_DELEGATE_TO')}" click="clickStatus(event)"/>
						
					</mx:HBox>
					<mx:HBox backgroundColor="0xCCCCCC" height="3" width="100%" top="0"/>
					<mx:Grid id="listToday"  width="100%"/>
					<mx:HBox height="22" width="100%" top="55" right="40" left="40" >
						<mx:HBox backgroundColor="0x006633"  height="21" width="130" >
							<mx:Label text="{i18n._('GLOBAL_THIS_WEEK')}" color="#FFFFFF" fontWeight="bold"/>
						</mx:HBox>
						<mx:Button id="btnComThis" label="{i18n._('GLOBAL_MARK_AS_COMPLETED')}" click="clickStatus(event)"/>
						<mx:Button id="btnAssThis" label="{i18n._('GLOBAL_DELEGATE_TO')}" click="clickStatus(event)"/>
					</mx:HBox>
					<mx:HBox backgroundColor="0xCCCCCC" height="3" width="100%" top="0"/>
					<mx:Grid id="listThisWeek" width="100%"/>
					<mx:HBox height="22" width="100%" top="55" right="40" left="40" >
						<mx:HBox backgroundColor="0x00CC00"  height="21" width="130" >
							<mx:Label text="{i18n._('GLOBAL_NEXT_WEEK')}" color="#FFFFFF" fontWeight="bold"/>
						</mx:HBox>
						<mx:Button id="btnComNext" label="{i18n._('GLOBAL_MARK_AS_COMPLETED')}" click="clickStatus(event)"/>
						<mx:Button id="btnAssNext" label="{i18n._('GLOBAL_DELEGATE_TO')}" click="clickStatus(event)"/>
					</mx:HBox>
					<mx:HBox backgroundColor="0xCCCCCC" height="3" width="100%" top="0"/>
					<mx:Grid id="listNextWeek" width="100%"/>
					<mx:HBox height="22" width="100%" top="55" right="40" left="40" >
						<mx:HBox backgroundColor="0x999999"  height="21" width="130" >
							<mx:Label text="{i18n._('GLOBAL_FUTURE')}" color="#FFFFFF" fontWeight="bold"/>
						</mx:HBox>
						<mx:Button id="btnComFuture" label="{i18n._('GLOBAL_MARK_AS_COMPLETED')}" click="clickStatus(event)"/>
						<mx:Button id="btnAssFuture" label="{i18n._('GLOBAL_DELEGATE_TO')}" click="clickStatus(event)"/>
					</mx:HBox>
					<mx:HBox backgroundColor="0xCCCCCC" height="3" width="100%" top="0"/>
					<mx:Grid id="listFuture" width="100%"/>
				</mx:VBox>
				<mx:VBox id="boxCompleted" width="100%" height="100%">
					<mx:HBox height="22" width="100%" top="55" right="40" left="40" >
						<mx:HBox backgroundColor="0x000000"  height="20" width="130" >
							<mx:Label text="{i18n._('GLOBAL_UPPERCASE_COMPLETED')}" color="#FFFFFF" fontWeight="bold"/>
						</mx:HBox>
						<mx:Button id="btnUpCompleted" label="{i18n._('GLOBAL_MARK_AS_UPCOMING')}" click="clickStatus(event)"/>
						<!--<mx:Button id="btnAssCompleted" label="{i18n._('GLOBAL_DELEGATE_TO')}" click="clickStatus(event)"/>-->
					</mx:HBox>
					<mx:HBox backgroundColor="0xCCCCCC" height="3" width="100%" top="0"/>
					<mx:Grid id="listCompleted" width="100%"/>
				</mx:VBox>
				<mx:VBox id="boxAssigned" width="100%" height="100%">
					<mx:HBox height="22" width="100%" top="55" right="40" left="40" >
						<mx:HBox backgroundColor="0x000000"  height="20" width="130" >
							<mx:Label text="{i18n._('GLOBAL_UPPERCASE_ASSIGNED')}" color="#FFFFFF" fontWeight="bold"/>
						</mx:HBox>
						<!--<mx:Button id="btnUpAssigned" label="{i18n._('GLOBAL_DELEGATE_TO')}" click="clickStatus(event)" />-->
						<mx:Button id="btnComAssigned" label="{i18n._('GLOBAL_MARK_AS_COMPLETED')}" click="clickStatus(event)"/>
					</mx:HBox>
					<mx:HBox backgroundColor="0xCCCCCC" height="3" width="100%" top="0"/>
					<mx:Grid id="listAssigned" width="100%"/>
				</mx:VBox>
			</mx:VBox>			
		</mx:Canvas>
	</mx:Canvas>
	
</mx:Canvas>
