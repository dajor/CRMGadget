<?xml version="1.0" encoding="utf-8"?>
<mx:Window xmlns:fx="http://ns.adobe.com/mxml/2009" 
		   xmlns:s="library://ns.adobe.com/flex/spark" 
		   xmlns:mx="library://ns.adobe.com/flex/mx"
		   showFlexChrome="false" transparent="true" systemChrome="none"
		    width="980" height="580" xmlns:control="gadget.control.*"
			initialize="init();">
	<fx:Script>
		<![CDATA[
			import gadget.dao.Database;
			import gadget.i18n.i18n;
			import gadget.util.FieldUtils;
			import gadget.util.Utils;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.controls.advancedDataGridClasses.AdvancedDataGridColumn;
			import mx.events.CloseEvent;
			
			import org.purepdf.pdf.ArabicLigaturizer;
			[Binable]
			private var templateName2Description:Dictionary = new Dictionary();
			[Binable]
			private var templateItems:ArrayCollection = new ArrayCollection();
			
			public var importItems:Function;
			private function init():void{
				initColumns();				
				refreshGrid();
			}
			
			private function refreshGrid():void{
				templateName2Description = new Dictionary();//clear old map
				var templates:ArrayCollection =new ArrayCollection( Database.templateDao.fetch());			
				for each(var template:Object in templates){
					templateName2Description[template.Name]=template.Description;
				}
				templateItems = new ArrayCollection(Database.templateItemDao.fetch());				
				gc.source = templateItems;
				gc.refresh();
				griditem.validateNow();
			}
			
			private function getDescription(data:Object,col:AdvancedDataGridColumn):String{
				if(data['GroupLabel']!=null){
					return templateName2Description[data['GroupLabel']];
				}
				
				return '';
			}
			
			private function createColumn(dataField:String,width:Number,editable:Boolean=false):AdvancedDataGridColumn{
				var col:AdvancedDataGridColumn = new AdvancedDataGridColumn();
				col.headerText = FieldUtils.getFieldDisplayName(Database.customObject12Dao.entity,dataField);
				col.dataField = dataField;
				col.editable = editable;
				col.width=width;
				col.sortable=false;
				
				return col;
				
			}
			
			protected function doDeleteTemplate(obj:Object):void{
				Alert.show(i18n._("GLOBAL_ARE_YOU_SURE_YOU_WANT_TO_DELETE@Are you sure you want to delete?"), i18n._('GLOBAL_DELETE@Delete'), Alert.YES | Alert.NO, this, function(eventObj:CloseEvent):void {
					
					if (eventObj.detail==Alert.YES) {
						try{
							Database.begin();
							var templateId:String = obj.children[0].TemplateId;
							Database.templateDao.delete_({'gadget_id':templateId});
							for each(var itemD:Object in obj.children){
								Database.templateItemDao.delete_({'gadget_id':itemD.gadget_id});
							}
							Database.commit();
							refreshGrid();
						}catch(e:SQLError){
							Database.rollback();
						}
					
					}}, null, Alert.NO);
				
			}
			
			private function initColumns():void{
				var cols:Array = new Array();				
				//itemname
				var col:AdvancedDataGridColumn =createColumn('GroupLabel',24);				
				col.headerText= i18n._('TEMPLATE/ITEM_NAME@Template/Item Name');
				col.labelFunction=getGroupLabel;
				cols.push(col);
				
				
				col=createColumn('',32,false);
				col.dataField = 'Description';
				col.labelFunction=getDescription;
				col.headerText=i18n._('GLOBAL_DESCRIPTION');
				cols.push(col);
				
				col=createColumn('CustomObject14ExternalSystemId',15,false);
				col.dataField = 'ItemNo';
				cols.push(col);		
				
				col=createColumn('CustomObject13Name',25,false);
				col.dataField = 'PlantName';
				cols.push(col);			
				//deleted column
				var deleteCol:AdvancedDataGridColumn = createColumn("",4,false);
				var deleteRender:ClassFactory = new ClassFactory(AdvancedDataGridDeleteColRender);
				deleteRender.properties={parentComp:this,addEmptyRow:false,
				showDeleteButton:function(obj:Object):Boolean{
						return obj!=null && obj['GroupLabel']!=null;
				},
				doDelete:doDeleteTemplate
				};
				deleteCol.itemRenderer=deleteRender;				
				cols.push(deleteCol);
				griditem.columns = cols;
			}
			private function getGroupLabel(data:Object,col:AdvancedDataGridColumn):String{
				var lbl:String = data['GroupLabel'];
				if(lbl==null){
					lbl = data['ItemName'];
				}
				return lbl;
			}
			public function doImport(e:Event):void{
				var obj:Object = griditem.selectedItems;
				if(obj!=null&&obj is Array){
					var a:Array = obj as Array;
					if(a.length==0){
						obj = null;
					}else{
						obj = a[0];
					}
				}
				if(obj==null||obj['GroupLabel']==null){
					Alert.show(i18n._("PLEASE_SELECT_TEMPLATE@Please select a template."), i18n._('GLOBAL_ERROR@Error'), Alert.OK,this);					
					return;
				}
				
				if(importItems!=null){
					var items:ArrayCollection = new ArrayCollection();
					var newObject:Object = new Object();	
					Utils.executeFomulaFields(Database.customObject12Dao.entity,newObject,new ArrayCollection([{column_name:'IndexedNumber0'},
						{column_name:'CustomCurrency1'},
						{column_name:'CustomCurrency2'},
						{column_name:'Name'},
						{column_name:'CustomCurrency0'}]));	
					for each(var o:Object in obj.children){
						var item:Object = Utils.copyModel(newObject);						
						item.CustomObject14Name = o.ItemName;
						item.CustomObject14ExternalSystemId =o.ItemNo;
						item.IndexedNumber0 = o.Qty;
						item.CustomObject13Id = o.PlantId;
						item.CustomObject13Name = o.PlantName;
						item.CustomObject14Id = o.ItemId;
						items.addItem(item);
					}
					importItems(items);
				}
				
				this.close();
			}
		]]>
	</fx:Script>
	<mx:Canvas id="detailCanvas" horizontalScrollPolicy="off" styleName="main" left="0" top="0" width="100%" height="100%" right="0" bottom="0">
		<control:TitleBar title="{i18n._('IMPORT_ORDER_TEMPLATE@Import Order Template')}" icon="@Embed(source='/assets/customize.png')" id="titlebar" y="2" x="25"/>
		<mx:VBox top="30" left="0" right="0" bottom="0" width="100%">
			<mx:VBox width="100%" height="100%" paddingRight="10" paddingLeft="10">
				<mx:AdvancedDataGrid id="griditem" sortExpertMode="true" width="100%" height="100%" initialize="gc.refresh();" >
					<mx:dataProvider>
						<mx:GroupingCollection2 id="gc">
							<mx:grouping>
								<mx:Grouping>
									<mx:GroupingField name="TemplateName"/>							
								</mx:Grouping>
							</mx:grouping>
						</mx:GroupingCollection2>
					</mx:dataProvider>        
					
				</mx:AdvancedDataGrid>  
				<mx:HBox horizontalAlign="right" width="100%" paddingRight="10" paddingBottom="10">
					<mx:Button id="btnCancel"   label="{i18n._('GLOBAL_CANCEL@Cancel')}" click="{this.close()}"/>
					<mx:Button id="btnSave"   label="{i18n._('GLOBAL_IMPORT@Import')}" click="doImport(event)"/>						
				</mx:HBox>		
			</mx:VBox>
		</mx:VBox>
	</mx:Canvas>
</mx:Window>
